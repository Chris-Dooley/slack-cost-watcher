AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Cost Watcher - Keeping tabs on your spend"

##############################################################################
# PARAMETERS
##############################################################################
Parameters:
  AccountWarningLevel:
    Default: 300
    Description: 'Per account: Warning level for monthly cost ($).'
    Type: Number
  AccountDangerLevel:
    Default: 500
    Description: 'Per account: Danger level for monthly cost ($).'
    Type: Number
  DetailWarningLevel:
    Default: 100
    Description: 'Service detail queries: Warning level for monthly cost ($).'
    Type: Number
  DetailDangerLevel:
    Default: 200
    Description: 'Service detail queries: Danger level for monthly cost ($).'
    Type: Number
  NotificationTime:
    Default: '3'
    Description: 'Notification time in 24-hour notation (UTC). (0-23)'
    Type: Number
  SlackWebHookUrl:
    Default: https://hooks.slack.com/services/abcd/efgh/ijkl
    Description: 'Incoming webhook URL from Slack.'
    Type: String

##############################################################################
# RESOURCES
##############################################################################
Resources:
  ############################################################################
  # API GATEWAY
  ############################################################################
  ApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "CostWatcher"
      Description: "Cost Watcher API for incoming slack messages"

  ApiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArnDispatch}/invocations"
          - LambdaArnDispatch: !GetAtt "LambdaFunctionCWDispatch.Arn"
      ResourceId: !GetAtt "ApiGateway.RootResourceId"
      RestApiId: !Ref "ApiGateway"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref "ApiGateway"
      StageName: "prod"
    DependsOn: "ApiGatewayRootMethod"

  ############################################################################
  # LAMBDAS
  ############################################################################
  LambdaFunctionCWDispatch:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./scripts/CostWatcherDispatch.py
      Description: "Cost Watcher - Dispatcher lambda to acknowledge a slash command and kick off the detail lookup"
      Environment:
        Variables:
          SNSTopicArn: !Join ["", ["arn:aws:sns:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId",":",!GetAtt "SNSTopicDispatch.TopicName"]]
      FunctionName: "CostWatcherDispatch"
      Handler: "CostWatcherDispatch.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: "python3.7"
      Timeout: 90



  LambdaFunctionCWAccount:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./scripts/CostWatcherAccount.py
      Description: "Cost Watcher - Returns the account daily and monthly costs to slack"
      Environment:
        Variables:
          AccountDangerLevel: !Ref "AccountDangerLevel"
          AccountWarningLevel: !Ref "AccountWarningLevel"
          SlackWebHookUrl: !Ref "SlackWebHookUrl"
          AccountLimit: 50
      FunctionName: "CostWatcherAccount"
      Handler: "CostWatcherAccount.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: "python3.7"
      Timeout: 90


  LambdaFunctionCWDetail:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./scripts/CostWatcherDetail.py
      Description: "Cost Watcher - Returns the service breakdown for an account to slack"
      Environment:
        Variables:
          DetailDangerLevel: !Ref "DetailDangerLevel"
          DetailWarningLevel: !Ref "DetailWarningLevel"
      FunctionName: "CostWatcherDetail"
      Handler: "CostWatcherDetail.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: "python3.7"
      Timeout: 90


  LambdaFunctionCWOverview:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./scripts/CostWatcherOverview.py
      Description: "Cost Watcher - Push cost data to SNS"
      Environment:
        Variables:
          SNSTopicArn: !Join ["", ["arn:aws:sns:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId",":",!GetAtt "SNSTopicOverview.TopicName"]]
      FunctionName: "CostWatcherOverview"
      Handler: "CostWatcherOverview.lambda_handler"
      MemorySize: 128
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: "python3.7"
      Timeout: 90


  ############################################################################
  # SNS
  ############################################################################
  SNSTopicDispatch:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "CostWatcherDispatch"
      Subscription:
        - Endpoint: !GetAtt "LambdaFunctionCWDetail.Arn"
          Protocol: lambda

  SNSTopicOverview:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "CostWatcherOverview"
      Subscription:
        - Endpoint: !GetAtt "LambdaFunctionCWAccount.Arn"
          Protocol: lambda


  ############################################################################
  # EVENT RULE (CRON)
  ############################################################################
  LambdaCronEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !Sub 'cron(0 ${NotificationTime} * * ? *)'
      Targets:
        - Arn:
            !GetAtt "LambdaFunctionCWOverview.Arn"
          Id:
            !Ref "LambdaFunctionCWOverview"

  ############################################################################
  # PERMISSIONS AND ROLES
  ############################################################################
  LambdaInvokePermissionCron:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt "LambdaFunctionCWOverview.Arn"
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "LambdaCronEvent.Arn"

  LambdaInvokePermissionSNSDetail:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt "LambdaFunctionCWDetail.Arn"
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref "SNSTopicDispatch"

  LambdaInvokePermissionSNSOverview:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt "LambdaFunctionCWAccount.Arn"
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref "SNSTopicOverview"

  LambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "LambdaFunctionCWDispatch.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/"

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: 
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "organizations:DescribeAccount"
                  - "organizations:DescribeOrganization"
                  - "ce:GetCostAndUsage"
                Effect: Allow
                Resource: '*'
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CostWatcherAccount:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CostWatcherDetail:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CostWatcherDispatch:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/CostWatcherOverview:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Action:
                  - "sns:Publish"
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CostWatcherDispatch"
                  - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:CostWatcherOverview"
          PolicyName: "CostWatcher"

  ############################################################################
  # LOG GROUPS
  ############################################################################
  LambdaLogGroupDispatch:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionCWDispatch}"
      RetentionInDays: 90

  LambdaLogGroupAccount:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionCWAccount}"
      RetentionInDays: 90

  LambdaLogGroupDetail:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionCWDetail}"
      RetentionInDays: 90

  LambdaLogGroupOverview:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionCWOverview}"
      RetentionInDays: 90


##############################################################################
# OUTPUTS
##############################################################################
Outputs:
  ApiGatewayInvokeURL:
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"

  LambdaArnDispatch:
    Value: !GetAtt "LambdaFunctionCWDispatch.Arn"

  LambdaArnAccount:
    Value: !GetAtt "LambdaFunctionCWAccount.Arn"

  LambdaArnDetail:
    Value: !GetAtt "LambdaFunctionCWDetail.Arn"

  LambdaArnOverview:
    Value: !GetAtt "LambdaFunctionCWOverview.Arn"

  SNSTopic:
    Value: !Ref "SNSTopicOverview"
